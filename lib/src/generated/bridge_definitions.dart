// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

abstract class LwkBridge {
  Future<String> newWalletStaticMethodApi(
      {required String mnemonic,
      required LiquidNetwork network,
      required String dbPath,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewWalletStaticMethodApiConstMeta;

  Future<void> syncStaticMethodApi(
      {required String walletId, required String electrumUrl, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSyncStaticMethodApiConstMeta;

  Future<String> descriptorStaticMethodApi(
      {required String walletId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDescriptorStaticMethodApiConstMeta;

  Future<WalletAddress> addressLastUnusedStaticMethodApi(
      {required String walletId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddressLastUnusedStaticMethodApiConstMeta;

  Future<WalletAddress> addressStaticMethodApi(
      {required String walletId, required int index, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddressStaticMethodApiConstMeta;

  Future<Balance> balanceStaticMethodApi(
      {required String walletId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBalanceStaticMethodApiConstMeta;

  Future<List<Tx>> txsStaticMethodApi({required String walletId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTxsStaticMethodApiConstMeta;

  Future<String> buildTxStaticMethodApi(
      {required String walletId,
      required int sats,
      required String outAddress,
      required double absFee,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBuildTxStaticMethodApiConstMeta;

  Future<PsetAmounts> decodeTxStaticMethodApi(
      {required String walletId, required String pset, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecodeTxStaticMethodApiConstMeta;

  Future<Uint8List> signTxStaticMethodApi(
      {required String walletId,
      required LiquidNetwork network,
      required String pset,
      required String mnemonic,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignTxStaticMethodApiConstMeta;

  Future<String> broadcastTxStaticMethodApi(
      {required String electrumUrl, required Uint8List txBytes, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBroadcastTxStaticMethodApiConstMeta;
}

class Balance {
  final int lbtc;

  const Balance({
    required this.lbtc,
  });
}

enum LiquidNetwork {
  Mainnet,
  Testnet,
}

/// Possible errors emitted
class LwkError implements FrbException {
  final String msg;

  const LwkError({
    required this.msg,
  });
}

class PsetAmounts {
  final int fee;
  final Balance balances;

  const PsetAmounts({
    required this.fee,
    required this.balances,
  });
}

class Tx {
  final String kind;
  final int amount;
  final String txid;
  final List<TxOut> outputs;
  final int fee;

  const Tx({
    required this.kind,
    required this.amount,
    required this.txid,
    required this.outputs,
    required this.fee,
  });
}

class TxOut {
  final String address;
  final int amount;

  const TxOut({
    required this.address,
    required this.amount,
  });
}

class WalletAddress {
  final String standard;
  final String confidential;
  final int index;

  const WalletAddress({
    required this.standard,
    required this.confidential,
    required this.index,
  });
}
